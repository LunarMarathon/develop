name: ðŸ§ª Test Suite (Pull Requests)

on:
  pull_request:
    branches: [ "master" ]

jobs:

  test-coverage:

    runs-on: ubuntu-latest

    steps:
    - uses: shivammathur/setup-php@15c43e89cdef867065b0213be354c2841860869e
      with:
        php-version: "8.0"
        coverage: xdebug
        extensions: fileinfo
    - uses: actions/checkout@v3
    
    - name: Validate composer.json and composer.lock
      run: composer validate --strict

    - name: Cache Composer packages
      id: composer-cache
      uses: actions/cache@v3
      with:
        path: vendor
        key: ${{ runner.os }}-php-${{ hashFiles('**/composer.lock') }}
        restore-keys: |
          ${{ runner.os }}-php-

    - name: Install Composer Dependencies
      run: composer install --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist

    - name: Set environment to testing
      run: echo "ENV=testing" > .env
    
    - name: Output debug information
      run: php hyde debug

    - name: Execute tests (Unit and Feature tests) via PHPUnit with coverage
      run: vendor/bin/pest --coverage --coverage-text=build/coverage/report.txt --colors=always --coverage-clover build/coverage/clover.xml --coverage-cobertura build/coverage/cobertura.xml --coverage-crap4j build/coverage/crap4j.xml --coverage-xml build/coverage/coverage-xml --log-junit build/junit.xml --testdox-text testdox.txt
      env:
        ENV: testing

    - uses: codecov/codecov-action@v2
      with:
        files: ./build/coverage/clover.xml,./build/coverage/crap4j.xml,./build/coverage/report.txt,./build/junit.xml

    - name: Ping statistics server with test results
      run: |
        curl https://gist.githubusercontent.com/caendesilva/d76fc6d73cb488863a8f6fda18a7c8c4/raw/24257c1f3ec4ce8a2c16601bbfa33f054f873be9/ping-openanalytics-testrunner.php -o ping.php
        php ping.php "Monorepo PR Test" ${{ secrets.OPENANALYTICS_TOKEN }}


  dusk-browser-tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Cache Composer packages
        id: composer-cache
        uses: actions/cache@v3
        with:
          path: vendor
          key: ${{ runner.os }}-php-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-php-

      - name: Install Composer Dependencies
        run: composer install --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist

      - name: Prepare the Environment
        run: echo -e "APP_URL=http://localhost:8080 \nDUSK_ENABLED=true" > .env

      - name: Upgrade Chrome Driver
        run: php hyde dusk:chrome-driver `/opt/google/chrome/chrome --version | cut -d " " -f3 | cut -d "." -f1`
      - name: Start Chrome Driver
        run: ./vendor/laravel/dusk/bin/chromedriver-linux &

      - name: Run HydeRC Server
        run: php hyde serve &

      - name: Run Dusk Tests
        env:
          APP_URL: "http://127.0.0.1:8080"
        run: php hyde dusk --pest

      - name: Upload Screenshots
        uses: actions/upload-artifact@v2
        with:
          name: screenshots
          path: tests/Browser/screenshots

      - name: Upload Compiled Source
        uses: actions/upload-artifact@v2
        with:
          name: dusk-source
          path: tests/Browser/source

      - name: Upload Console Logs
        if: failure()
        uses: actions/upload-artifact@v2
        with:
          name: dusk-console
          path: tests/Browser/console


  visual-regression-testing:
    runs-on: ubuntu-latest
    needs: dusk-browser-tests
    steps:
      - name: Download Dusk generated pages
        uses: actions/download-artifact@v2
        with:
          name: dusk-source
          path: _site
          
      - name: Remove .txt extension from HTML files
        run: cd _site && bash -c 'for f in *.txt; do mv -- "$f" "${f%.txt}"; done'

      # @TODO compile latest hydefront version
      - name: Download app.css
        run: |
          mkdir _site/media
          cd _site/media
          wget https://raw.githubusercontent.com/hydephp/develop/master/_media/app.css
      
      - name: Upload build to Percy
        run: npx percy snapshot _site/
        env:
          PERCY_TOKEN: ${{ secrets.PERCY_TOKEN }}


  check-coding-standards:
    runs-on: ubuntu-latest
    steps:
      - uses: shivammathur/setup-php@15c43e89cdef867065b0213be354c2841860869e
        with:
          php-version: "8.0"
      - uses: actions/checkout@v3

      - name: Install Composer Dependencies
        run: composer install --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist

      - name: Create cache directory
        run: mkdir build/cache -p

      - name: Check syntax (PHP Parallel Lint)
        run: vendor/bin/parallel-lint --colors app config packages tests --show-deprecated

      - name: Check coding syntax/standards (PHP CodeSniffer)
        run: vendor/bin/phpcs --colors --cache=build/cache/phpcs.cache packages --standard=PSR2 --extensions="php" --ignore="*test.php,*.blade.php,ValidationService.php" || true


  run-static-analysis:
    runs-on: ubuntu-latest
    steps:
      - uses: shivammathur/setup-php@15c43e89cdef867065b0213be354c2841860869e
        with:
          php-version: "8.0"
      - uses: actions/checkout@v3

      - name: Install Composer Dependencies
        run: composer install --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist

      - name: Run static analysis (PHPStan)
        run: vendor/bin/phpstan analyse --ansi  packages/framework/src packages/realtime-compiler/src || true
