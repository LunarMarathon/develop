name: Test Suite (Matrix)
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  # First run tests with coverage. If this fails, we don't need to run the matrix.
  test-coverage:
    runs-on: ubuntu-latest

    steps:
    - uses: shivammathur/setup-php@15c43e89cdef867065b0213be354c2841860869e
      with:
        php-version: '8.0'
        coverage: xdebug
        extensions: fileinfo
    - name: Install Hyde
      run: git clone https://github.com/hydephp/hyde.git $(pwd)
    - name: Install Dependencies
      run: composer install --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist
    - name: Set Framework version to dev-github.ref_name 
      run: 'composer require hyde/framework:dev-${{ github.ref_name }}'
    - name: Set environment to testing
      run: echo "ENV=testing" > .env
    - name: Output debug information
      run: php hyde debug
    - name: Run tests with output coverage reporting
      run: vendor/bin/pest --coverage
      env: 
        ENV: testing

    - name: Run tests and save coverage to file
      run: vendor/bin/pest --coverage-text=report.txt
      env: 
        ENV: testing

    - name: Upload the report as an artifact
      uses: actions/upload-artifact@v1
      with:
        name: 'report.txt'
        path: 'report.txt'

  hyde-tests:
    needs: test-coverage
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, macos-latest]
    runs-on: ${{ matrix.os }}

    steps:
    - uses: shivammathur/setup-php@15c43e89cdef867065b0213be354c2841860869e
      with:
        php-version: '8.0'
        extensions: fileinfo
    - name: Install Hyde
      run: git clone https://github.com/hydephp/hyde.git $(pwd)
    - name: Install Dependencies
      run: composer install --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist
    - name: Set Framework version to dev-github.ref_name 
      run: 'composer require hyde/framework:dev-${{ github.ref_name }}'
    - name: Set environment to testing
      run: echo "ENV=testing" > .env
    - name: Execute tests (Unit and Feature tests) via PHPUnit/Pest
      run: vendor/bin/pest
      env: 
        ENV: testing

  update-coverage-badge:
    runs-on: ubuntu-latest
    needs: test-coverage
    if: github.event_name == 'push'

    steps:
    - uses: shivammathur/setup-php@15c43e89cdef867065b0213be354c2841860869e
      with:
        php-version: '8.0'
        extensions: fileinfo
    
    - name: Download report
      uses: actions/download-artifact@v3
      with:
        name: report.txt
        path: report.txt

    - name: Download Coverage Parser
      run: 'wget https://gist.githubusercontent.com/caendesilva/75a5ff8dd4e23921b75f503149655924/raw/456bd4bae423eda2a3ff2ba2ce8f8246f366d46f/parser.php'
    - name: Run the parser
      id: run-coverage-parser
      run: echo ::set-output name=average_coverage::$(php parser.php)
    - name: Output the value
      run: echo Result ${{ steps.run-coverage-parser.outputs.average_coverage }}     
    - name: Post the result to server
      run: 'curl -X POST https://cdn.desilva.se/microservices/coverbadges/api.php -H "Content-Type: application/x-www-form-urlencoded" -d "repo=https://github.com/hydephp/hyde&value=${{ steps.run-coverage-parser.outputs.average_coverage }}&token=${{ secrets.COVERBADGES_SECRET }}"'

    - name: Download the SVG badge
      run: 'wget https://cdn.desilva.se/microservices/coverbadges/badges/9b8f6a9a7a48a2df54e6751790bad8bd910015301e379f334d6ec74c4c3806d1.svg'
      
    - name: Upload the SVG badge as an artifact
      uses: actions/upload-artifact@v1
      with:
        name: 'badge.svg'
        path: '9b8f6a9a7a48a2df54e6751790bad8bd910015301e379f334d6ec74c4c3806d1.svg'
      