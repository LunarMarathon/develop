name: Test With Coverage


on:
  push:
    branches: [ master ]

  workflow_dispatch:

jobs:
  output-coverage:
    runs-on: ubuntu-latest

    
    steps:
    - uses: shivammathur/setup-php@15c43e89cdef867065b0213be354c2841860869e
      with:
        php-version: '8.0'
        coverage: xdebug
        extensions: fileinfo
    - uses: actions/checkout@v2
    - name: Install Dependencies
      run: composer install --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist
    - name: Set Framework version to dev-master
      run: composer require hyde/framework:dev-master
    - name: Set environment to testing
      run: echo "ENV=testing" > .env
    - name: Run tests with output coverage reporting
      run: vendor/bin/pest --coverage
      env: 
        ENV: testing


  update-coverage-badge:
    
    runs-on: ubuntu-latest
    needs: output-coverage # If the previous job fails due to a test failure we don't need to try again

    steps:
    - uses: shivammathur/setup-php@15c43e89cdef867065b0213be354c2841860869e
      with:
        php-version: '8.0'
        coverage: xdebug
        extensions: fileinfo
    - uses: actions/checkout@v2
    - name: Install Dependencies
      run: composer install --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist
    - name: Set Framework version to dev-master
      run: composer require hyde/framework:dev-master
    - name: Set environment to testing
      run: echo "ENV=testing" > .env
    - name: Execute tests (Unit and Feature tests) via PHPUnit/Pest
      run: vendor/bin/pest --coverage-text=report.txt
      env: 
        ENV: testing

    - name: Upload the report as an artifact
      uses: actions/upload-artifact@v1
      with:
        name: 'report.txt'
        path: 'report.txt'
   
    - name: Download Coverage Parser
      run: 'wget https://gist.githubusercontent.com/caendesilva/75a5ff8dd4e23921b75f503149655924/raw/456bd4bae423eda2a3ff2ba2ce8f8246f366d46f/parser.php'
    - name: Run the parser
      id: run-coverage-parser
      run: echo ::set-output name=average_coverage::$(php parser.php)
    - name: Output the value
      run: echo Result ${{ steps.run-coverage-parser.outputs.average_coverage }}     
    - name: Post the result to server
      run: 'curl -X POST https://cdn.desilva.se/microservices/coverbadges/api.php -H "Content-Type: application/x-www-form-urlencoded" -d "repo=https://github.com/hydephp/hyde&value=${{ steps.run-coverage-parser.outputs.average_coverage }}&token=${{ secrets.COVERBADGES_SECRET }}"'
  

  create-coverage-report:
    needs: output-coverage # If the previous job fails due to a test failure we don't need to try again
    runs-on: ubuntu-latest
    
    steps:
    - uses: shivammathur/setup-php@15c43e89cdef867065b0213be354c2841860869e
      with:
        php-version: '8.0'
        coverage: xdebug
        extensions: fileinfo
    - uses: actions/checkout@v2
    - name: Install Dependencies
      run: composer install --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist
    - name: Set Framework version to dev-master
      run: composer require hyde/framework:dev-master
    - name: Set environment to testing
      run: echo "ENV=testing" > .env
    - name: Run tests with HTML coverage reporting
      run: vendor/bin/pest --coverage-html covrep
      env: 
        ENV: testing

    - name: Upload the report as an artifact
      uses: actions/upload-artifact@v1
      with:
        name: 'coverage-report'
        path: 'covrep'
  
  upload-coverage-report:
    needs: create-coverage-report
    environment:
      name: gh_pages
      url: https://hydephp.github.io/developer-tools/coverage-report/
    runs-on: ubuntu-latest

    steps:
      - name: Download coverage report artifact
        uses: actions/download-artifact@v3
        with:
          name: coverage-report
          path: coverage-report

      - name: Write run metadata to file
        run: |
          currentDate=`date`
          echo "Report automatically uploaded by GitHub at $currentDate" > coverage-report/report-information.txt

      - name: Upload report to GitHub Pages
        uses: cpina/github-action-push-to-another-repository@v1.4.2

        env:
          API_TOKEN_GITHUB: ${{ secrets.API_TOKEN_GITHUB }}
        with:
          source-directory: "."
          destination-github-username: "hydephp"
          destination-repository-name: "developer-tools"
          target-branch: gh-pages

  #create-php-docs:
  #  runs-on: ubuntu-latest
